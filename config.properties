#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   within the appropriate properties (e.g., pctl, csl) file.

#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
PROBLEM = PROBLEM_Zeroconf_ExpN
#FX --single point in pareto
#	MODEL_TEMPLATE_FILE = models/FX/fxSmall.pm
#	PROPERTIES_FILE = models/FX/fxSmall.pctl

#FX--error evolveconst

#Zeroconf --error evolveconst
	MODEL_TEMPLATE_FILE = mmmmodels/Zeroconf/zeroconf.pm
	PROPERTIES_FILE = models/Zeroconf/zeroconf.pctl




#Step2 : Set the algorithm (MOGA or Random) to run
	#ALGORITHM = RANDOM
	ALGORITHM = NSGAII
	#ALGORITHM = SPEA2
	#ALGORITHM = MOCELL


#Step 3: Set the population for the MOGAs
	POPULATION_SIZE = 40
	

#Step 4: Set the maximum number of evaluations
	MAX_EVALUATIONS = 200


#Step 5: Set the number of processors (for parallel execution) and initial port
	PROCESSORS = 1
	INIT_PORT = 8860
	

#Step 6: Set the directories containing the libraries of the model checker 
	MODEL_CHECKING_ENGINE_LIBS_DIRECTORY = libs/runtime
	#-amd64
 

#Step 7: Set plotting settings 
	#Note: requires Python3
	PLOT_PARETO_FRONT = TRUE
	PYTHON3_DIRECTORY = /usr/bin/python3 
#	/usr/local/bin/python3


#Step 8: Set additional settings
	VERBOSE = TRUE
	
	#Which EvoChecker engine should be used: Options: NORMAL, PARAMETRIC
	#If is absent the normal EvoChecker will be used
	#EVOCHECKER_TYPE = NORMAL
	
	
	#Option: PRISM | STORM (preference: PRISM for NORMAL, STORM for PARAMETRIC)
#	EVOCHECKER_ENGINE = PRISM
	
#	EVOCHECKER_TYPE = PARAMETRIC
#	EVOCHECKER_ENGINE = STORM

	EVOCHECKER_TYPE = NORMAL
	EVOCHECKER_ENGINE = PRISM


#Step 9: Initialise from previous Pareto set/front of solutions
    # Select percentage of previous population to re-use
    SEED_PERCENTAGE = 20
    # Type of reload: RANDOM | KMEANS |  FUZZYKMEANS | DBSCAN
    SEED_TYPE = DBSCAN
    # Seed cluster strategy using the previous Pareto front or set or both: FRONT | SET | BOTH
    SEED_CLUSTER_FROM_PARETO = FRONT
    # If KMEANS
    SEED_KMEANS_ITERATIONS = 1000
    # If FUZZYKMEANS
    SEED_FUZZINESS = 1.03 
    # If DBSCAN
    SEED_DBSCAN_EPS = 2
    SEED_DBSCAN_MINPTS = 3
    # Save Pareto set/front every N>1 iterations (total iterations = evaluations/population)
    SAVE_PARETO_EVERY_N_ITERATIONS =  20


#Step 9: Run 
	# Within your main class do:
	
	# 1) Create EvoChecker instance
	#    EvoChecker ec = new EvoChecker();
	#
	# 2) Set configuration file
	#	String configFile ="resources/config.properties"; 
	#	ec.setConfigurationFile(configFile);
	#
	# 3) Start EvoChecker
	#    ec.start();
		

#############################################################3
#Advanced Settings 
#	JAVA=/Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home/bin/java

#	MODEL_CHECKING_ENGINE = libs/PrismExecutor.jar


